/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_HELIUM_LONGFI_LONGFI_PB_H_INCLUDED
#define PB_HELIUM_LONGFI_LONGFI_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _helium_longfi_LongFiSpreading { 
    helium_longfi_LongFiSpreading_SF_INVALID = 0, 
    helium_longfi_LongFiSpreading_SF7 = 1, 
    helium_longfi_LongFiSpreading_SF8 = 2, 
    helium_longfi_LongFiSpreading_SF9 = 3, 
    helium_longfi_LongFiSpreading_SF10 = 4 
} helium_longfi_LongFiSpreading;

/* Struct definitions */
typedef struct _helium_longfi_LongFiRxPacket { 
    /* Status of CRC check. */
    bool crc_check; 
    /* 1uS-resolution timestamp derived from concentrator's internal counter. */
    uint64_t timestamp; 
    /* Average packet RSSI in dB. */
    float rssi; 
    /* Average packet SNR, in dB. */
    float snr; 
    /* Organization Unique ID */
    uint32_t oui; 
    /* Device ID */
    uint32_t device_id; 
    /* Fingerprint */
    uint32_t fingerprint; 
    /* Sequence */
    uint32_t sequence; 
    /* Spreading to be used */
    helium_longfi_LongFiSpreading spreading; 
    /* the fully reassembled payload */
    pb_callback_t payload; 
    /* De-golayed datagram id and flag bits.
 NOTE: only the lowest 12 bits are valid. */
    uint32_t tag_bits; 
} helium_longfi_LongFiRxPacket;

typedef struct _helium_longfi_LongFiTxPacket { 
    /* is device receiver (downlink) or is router receiver (uplink)
 note: when Hotspot is sending Proof of Coverage packet,
 it should behave as a device and flag this as "uplink" */
    bool downlink; 
    /* should the receiver ACK */
    bool should_ack; 
    /* on uplink, this indicates the device is ready to receive downlink */
    bool cts; 
    /* is the packet urgent */
    bool priority; 
    /* the packet beyond the tag field is encoded with LDPC */
    bool ldpc; 
    /* Organization Unique ID */
    uint32_t oui; 
    /* Device ID */
    uint32_t device_id; 
    /* Fingerprint */
    uint32_t fingerpint; 
    /* Sequence */
    uint32_t sequence; 
    /* Spreading to be used */
    helium_longfi_LongFiSpreading spreading; 
    pb_callback_t payload; 
} helium_longfi_LongFiTxPacket;

typedef struct _helium_longfi_LongFiTxStatus { 
    bool success; 
} helium_longfi_LongFiTxStatus;

typedef struct _helium_longfi_LongFiReq { 
    uint32_t id; 
    pb_size_t which_kind;
    union {
        helium_longfi_LongFiTxPacket tx;
    } kind; 
} helium_longfi_LongFiReq;

typedef struct _helium_longfi_LongFiResp { 
    uint32_t id; 
    pb_size_t which_kind;
    union {
        helium_longfi_LongFiTxStatus tx_status;
        helium_longfi_LongFiRxPacket rx;
        pb_callback_t parse_err;
    } kind; 
    pb_callback_t miner_name; 
} helium_longfi_LongFiResp;


/* Helper constants for enums */
#define _helium_longfi_LongFiSpreading_MIN helium_longfi_LongFiSpreading_SF_INVALID
#define _helium_longfi_LongFiSpreading_MAX helium_longfi_LongFiSpreading_SF10
#define _helium_longfi_LongFiSpreading_ARRAYSIZE ((helium_longfi_LongFiSpreading)(helium_longfi_LongFiSpreading_SF10+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define helium_longfi_LongFiReq_init_default     {0, 0, {helium_longfi_LongFiTxPacket_init_default}}
#define helium_longfi_LongFiResp_init_default    {0, 0, {helium_longfi_LongFiTxStatus_init_default}, {{NULL}, NULL}}
#define helium_longfi_LongFiTxStatus_init_default {0}
#define helium_longfi_LongFiRxPacket_init_default {0, 0, 0, 0, 0, 0, 0, 0, _helium_longfi_LongFiSpreading_MIN, {{NULL}, NULL}, 0}
#define helium_longfi_LongFiTxPacket_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, _helium_longfi_LongFiSpreading_MIN, {{NULL}, NULL}}
#define helium_longfi_LongFiReq_init_zero        {0, 0, {helium_longfi_LongFiTxPacket_init_zero}}
#define helium_longfi_LongFiResp_init_zero       {0, 0, {helium_longfi_LongFiTxStatus_init_zero}, {{NULL}, NULL}}
#define helium_longfi_LongFiTxStatus_init_zero   {0}
#define helium_longfi_LongFiRxPacket_init_zero   {0, 0, 0, 0, 0, 0, 0, 0, _helium_longfi_LongFiSpreading_MIN, {{NULL}, NULL}, 0}
#define helium_longfi_LongFiTxPacket_init_zero   {0, 0, 0, 0, 0, 0, 0, 0, 0, _helium_longfi_LongFiSpreading_MIN, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define helium_longfi_LongFiRxPacket_crc_check_tag 1
#define helium_longfi_LongFiRxPacket_timestamp_tag 2
#define helium_longfi_LongFiRxPacket_rssi_tag    3
#define helium_longfi_LongFiRxPacket_snr_tag     4
#define helium_longfi_LongFiRxPacket_oui_tag     5
#define helium_longfi_LongFiRxPacket_device_id_tag 6
#define helium_longfi_LongFiRxPacket_fingerprint_tag 7
#define helium_longfi_LongFiRxPacket_sequence_tag 9
#define helium_longfi_LongFiRxPacket_spreading_tag 10
#define helium_longfi_LongFiRxPacket_payload_tag 11
#define helium_longfi_LongFiRxPacket_tag_bits_tag 12
#define helium_longfi_LongFiTxPacket_downlink_tag 1
#define helium_longfi_LongFiTxPacket_should_ack_tag 2
#define helium_longfi_LongFiTxPacket_cts_tag     3
#define helium_longfi_LongFiTxPacket_priority_tag 4
#define helium_longfi_LongFiTxPacket_ldpc_tag    5
#define helium_longfi_LongFiTxPacket_oui_tag     6
#define helium_longfi_LongFiTxPacket_device_id_tag 7
#define helium_longfi_LongFiTxPacket_fingerpint_tag 8
#define helium_longfi_LongFiTxPacket_sequence_tag 9
#define helium_longfi_LongFiTxPacket_spreading_tag 10
#define helium_longfi_LongFiTxPacket_payload_tag 11
#define helium_longfi_LongFiTxStatus_success_tag 1
#define helium_longfi_LongFiReq_id_tag           1
#define helium_longfi_LongFiReq_tx_tag           2
#define helium_longfi_LongFiResp_id_tag          1
#define helium_longfi_LongFiResp_tx_status_tag   2
#define helium_longfi_LongFiResp_rx_tag          3
#define helium_longfi_LongFiResp_parse_err_tag   4
#define helium_longfi_LongFiResp_miner_name_tag  5

/* Struct field encoding specification for nanopb */
#define helium_longfi_LongFiReq_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (kind,tx,kind.tx),   2)
#define helium_longfi_LongFiReq_CALLBACK NULL
#define helium_longfi_LongFiReq_DEFAULT NULL
#define helium_longfi_LongFiReq_kind_tx_MSGTYPE helium_longfi_LongFiTxPacket

#define helium_longfi_LongFiResp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (kind,tx_status,kind.tx_status),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (kind,rx,kind.rx),   3) \
X(a, CALLBACK, ONEOF,    BYTES,    (kind,parse_err,kind.parse_err),   4) \
X(a, CALLBACK, SINGULAR, BYTES,    miner_name,        5)
#define helium_longfi_LongFiResp_CALLBACK pb_default_field_callback
#define helium_longfi_LongFiResp_DEFAULT NULL
#define helium_longfi_LongFiResp_kind_tx_status_MSGTYPE helium_longfi_LongFiTxStatus
#define helium_longfi_LongFiResp_kind_rx_MSGTYPE helium_longfi_LongFiRxPacket

#define helium_longfi_LongFiTxStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     success,           1)
#define helium_longfi_LongFiTxStatus_CALLBACK NULL
#define helium_longfi_LongFiTxStatus_DEFAULT NULL

#define helium_longfi_LongFiRxPacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     crc_check,         1) \
X(a, STATIC,   SINGULAR, UINT64,   timestamp,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    rssi,              3) \
X(a, STATIC,   SINGULAR, FLOAT,    snr,               4) \
X(a, STATIC,   SINGULAR, UINT32,   oui,               5) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         6) \
X(a, STATIC,   SINGULAR, UINT32,   fingerprint,       7) \
X(a, STATIC,   SINGULAR, UINT32,   sequence,          9) \
X(a, STATIC,   SINGULAR, UENUM,    spreading,        10) \
X(a, CALLBACK, SINGULAR, BYTES,    payload,          11) \
X(a, STATIC,   SINGULAR, UINT32,   tag_bits,         12)
#define helium_longfi_LongFiRxPacket_CALLBACK pb_default_field_callback
#define helium_longfi_LongFiRxPacket_DEFAULT NULL

#define helium_longfi_LongFiTxPacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     downlink,          1) \
X(a, STATIC,   SINGULAR, BOOL,     should_ack,        2) \
X(a, STATIC,   SINGULAR, BOOL,     cts,               3) \
X(a, STATIC,   SINGULAR, BOOL,     priority,          4) \
X(a, STATIC,   SINGULAR, BOOL,     ldpc,              5) \
X(a, STATIC,   SINGULAR, UINT32,   oui,               6) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         7) \
X(a, STATIC,   SINGULAR, UINT32,   fingerpint,        8) \
X(a, STATIC,   SINGULAR, UINT32,   sequence,          9) \
X(a, STATIC,   SINGULAR, UENUM,    spreading,        10) \
X(a, CALLBACK, SINGULAR, BYTES,    payload,          11)
#define helium_longfi_LongFiTxPacket_CALLBACK pb_default_field_callback
#define helium_longfi_LongFiTxPacket_DEFAULT NULL

extern const pb_msgdesc_t helium_longfi_LongFiReq_msg;
extern const pb_msgdesc_t helium_longfi_LongFiResp_msg;
extern const pb_msgdesc_t helium_longfi_LongFiTxStatus_msg;
extern const pb_msgdesc_t helium_longfi_LongFiRxPacket_msg;
extern const pb_msgdesc_t helium_longfi_LongFiTxPacket_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define helium_longfi_LongFiReq_fields &helium_longfi_LongFiReq_msg
#define helium_longfi_LongFiResp_fields &helium_longfi_LongFiResp_msg
#define helium_longfi_LongFiTxStatus_fields &helium_longfi_LongFiTxStatus_msg
#define helium_longfi_LongFiRxPacket_fields &helium_longfi_LongFiRxPacket_msg
#define helium_longfi_LongFiTxPacket_fields &helium_longfi_LongFiTxPacket_msg

/* Maximum encoded size of messages (where known) */
/* helium_longfi_LongFiReq_size depends on runtime parameters */
/* helium_longfi_LongFiResp_size depends on runtime parameters */
/* helium_longfi_LongFiRxPacket_size depends on runtime parameters */
/* helium_longfi_LongFiTxPacket_size depends on runtime parameters */
#define helium_longfi_LongFiTxStatus_size        2

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
