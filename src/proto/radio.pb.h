/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_HELIUM_RADIO_RADIO_PB_H_INCLUDED
#define PB_HELIUM_RADIO_RADIO_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _helium_radio_Radio { 
    helium_radio_Radio_R0 = 0, 
    helium_radio_Radio_R1 = 1 
} helium_radio_Radio;

typedef enum _helium_radio_Spreading { 
    helium_radio_Spreading_SF_UNDEFINED = 0, 
    helium_radio_Spreading_SF7 = 1, 
    helium_radio_Spreading_SF8 = 2, 
    helium_radio_Spreading_SF9 = 3, 
    helium_radio_Spreading_SF10 = 4, 
    helium_radio_Spreading_SF11 = 5, 
    helium_radio_Spreading_SF12 = 6 
} helium_radio_Spreading;

typedef enum _helium_radio_Bandwidth { 
    helium_radio_Bandwidth_BW_UNDEFINED = 0, 
    helium_radio_Bandwidth_BW7_8kHz = 1, 
    helium_radio_Bandwidth_BW15_6kHz = 2, 
    helium_radio_Bandwidth_BW31_2kHz = 3, 
    helium_radio_Bandwidth_BW62_5kHz = 4, 
    helium_radio_Bandwidth_BW125kHz = 5, 
    helium_radio_Bandwidth_BW250kHz = 6, 
    helium_radio_Bandwidth_BW500kHz = 7 
} helium_radio_Bandwidth;

typedef enum _helium_radio_Coderate { 
    helium_radio_Coderate_CR_UNDEFINED = 0, 
    helium_radio_Coderate_CR4_5 = 1, 
    helium_radio_Coderate_CR4_6 = 2, 
    helium_radio_Coderate_CR4_7 = 3, 
    helium_radio_Coderate_CR4_8 = 4 
} helium_radio_Coderate;

/* Struct definitions */
typedef struct _helium_radio_RadioRxPacket { 
    /* Center frequency of the channel this packet was received on. */
    uint32_t freq; 
    /* Channel this packet packet was received on. */
    uint32_t if_chain; 
    /* Status of CRC check. */
    bool crc_check; 
    /* 1uS-resolution timestamp derived from concentrator's internal counter. */
    uint64_t timestamp; 
    /* RF chain this packet was received on. */
    helium_radio_Radio radio; 
    /* Modulation bandwidth. */
    helium_radio_Bandwidth bandwidth; 
    /* Spreading factor of this packet. */
    helium_radio_Spreading spreading; 
    /* Error Correcting Code rate of this packet. */
    helium_radio_Coderate coderate; 
    /* Average packet RSSI in dB. */
    float rssi; 
    /* Average packet SNR, in dB. */
    float snr; 
    /* This packet's payload. */
    pb_callback_t payload; 
} helium_radio_RadioRxPacket;

typedef struct _helium_radio_RadioTxReq { 
    /* Center frequency to transmit on. */
    uint32_t freq; 
    /* Which radio to transmit on. */
    helium_radio_Radio radio; 
    /* TX power (in dBm). */
    int32_t power; 
    /* Modulation bandwidth. */
    helium_radio_Bandwidth bandwidth; 
    /* Spreading factor to use with this packet. */
    helium_radio_Spreading spreading; 
    /* Error-correcting-code of the packet. */
    helium_radio_Coderate coderate; 
    /* Invert signal polarity for orthogonal downlinks. */
    bool invert_polarity; 
    /* Do not send a CRC in the packet. */
    bool omit_crc; 
    /* Enable implicit header mode. */
    bool implicit_header; 
    /* Arbitrary user-defined payload to transmit. */
    pb_callback_t payload; 
} helium_radio_RadioTxReq;

typedef struct _helium_radio_RadioTxResp { 
    bool success; 
} helium_radio_RadioTxResp;

typedef struct _helium_radio_RadioReq { 
    uint32_t id; 
    pb_size_t which_kind;
    union {
        helium_radio_RadioTxReq tx;
    } kind; 
} helium_radio_RadioReq;

typedef struct _helium_radio_RadioResp { 
    uint32_t id; 
    pb_size_t which_kind;
    union {
        helium_radio_RadioTxResp tx;
        helium_radio_RadioRxPacket rx_packet;
        pb_callback_t parse_err;
    } kind; 
} helium_radio_RadioResp;


/* Helper constants for enums */
#define _helium_radio_Radio_MIN helium_radio_Radio_R0
#define _helium_radio_Radio_MAX helium_radio_Radio_R1
#define _helium_radio_Radio_ARRAYSIZE ((helium_radio_Radio)(helium_radio_Radio_R1+1))

#define _helium_radio_Spreading_MIN helium_radio_Spreading_SF_UNDEFINED
#define _helium_radio_Spreading_MAX helium_radio_Spreading_SF12
#define _helium_radio_Spreading_ARRAYSIZE ((helium_radio_Spreading)(helium_radio_Spreading_SF12+1))

#define _helium_radio_Bandwidth_MIN helium_radio_Bandwidth_BW_UNDEFINED
#define _helium_radio_Bandwidth_MAX helium_radio_Bandwidth_BW500kHz
#define _helium_radio_Bandwidth_ARRAYSIZE ((helium_radio_Bandwidth)(helium_radio_Bandwidth_BW500kHz+1))

#define _helium_radio_Coderate_MIN helium_radio_Coderate_CR_UNDEFINED
#define _helium_radio_Coderate_MAX helium_radio_Coderate_CR4_8
#define _helium_radio_Coderate_ARRAYSIZE ((helium_radio_Coderate)(helium_radio_Coderate_CR4_8+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define helium_radio_RadioReq_init_default       {0, 0, {helium_radio_RadioTxReq_init_default}}
#define helium_radio_RadioResp_init_default      {0, 0, {helium_radio_RadioTxResp_init_default}}
#define helium_radio_RadioTxReq_init_default     {0, _helium_radio_Radio_MIN, 0, _helium_radio_Bandwidth_MIN, _helium_radio_Spreading_MIN, _helium_radio_Coderate_MIN, 0, 0, 0, {{NULL}, NULL}}
#define helium_radio_RadioRxPacket_init_default  {0, 0, 0, 0, _helium_radio_Radio_MIN, _helium_radio_Bandwidth_MIN, _helium_radio_Spreading_MIN, _helium_radio_Coderate_MIN, 0, 0, {{NULL}, NULL}}
#define helium_radio_RadioTxResp_init_default    {0}
#define helium_radio_RadioReq_init_zero          {0, 0, {helium_radio_RadioTxReq_init_zero}}
#define helium_radio_RadioResp_init_zero         {0, 0, {helium_radio_RadioTxResp_init_zero}}
#define helium_radio_RadioTxReq_init_zero        {0, _helium_radio_Radio_MIN, 0, _helium_radio_Bandwidth_MIN, _helium_radio_Spreading_MIN, _helium_radio_Coderate_MIN, 0, 0, 0, {{NULL}, NULL}}
#define helium_radio_RadioRxPacket_init_zero     {0, 0, 0, 0, _helium_radio_Radio_MIN, _helium_radio_Bandwidth_MIN, _helium_radio_Spreading_MIN, _helium_radio_Coderate_MIN, 0, 0, {{NULL}, NULL}}
#define helium_radio_RadioTxResp_init_zero       {0}

/* Field tags (for use in manual encoding/decoding) */
#define helium_radio_RadioRxPacket_freq_tag      1
#define helium_radio_RadioRxPacket_if_chain_tag  2
#define helium_radio_RadioRxPacket_crc_check_tag 3
#define helium_radio_RadioRxPacket_timestamp_tag 4
#define helium_radio_RadioRxPacket_radio_tag     5
#define helium_radio_RadioRxPacket_bandwidth_tag 6
#define helium_radio_RadioRxPacket_spreading_tag 7
#define helium_radio_RadioRxPacket_coderate_tag  8
#define helium_radio_RadioRxPacket_rssi_tag      9
#define helium_radio_RadioRxPacket_snr_tag       10
#define helium_radio_RadioRxPacket_payload_tag   11
#define helium_radio_RadioTxReq_freq_tag         1
#define helium_radio_RadioTxReq_radio_tag        2
#define helium_radio_RadioTxReq_power_tag        3
#define helium_radio_RadioTxReq_bandwidth_tag    4
#define helium_radio_RadioTxReq_spreading_tag    5
#define helium_radio_RadioTxReq_coderate_tag     6
#define helium_radio_RadioTxReq_invert_polarity_tag 7
#define helium_radio_RadioTxReq_omit_crc_tag     8
#define helium_radio_RadioTxReq_implicit_header_tag 9
#define helium_radio_RadioTxReq_payload_tag      10
#define helium_radio_RadioTxResp_success_tag     1
#define helium_radio_RadioReq_id_tag             1
#define helium_radio_RadioReq_tx_tag             2
#define helium_radio_RadioResp_id_tag            1
#define helium_radio_RadioResp_tx_tag            2
#define helium_radio_RadioResp_rx_packet_tag     3
#define helium_radio_RadioResp_parse_err_tag     4

/* Struct field encoding specification for nanopb */
#define helium_radio_RadioReq_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (kind,tx,kind.tx),   2)
#define helium_radio_RadioReq_CALLBACK NULL
#define helium_radio_RadioReq_DEFAULT NULL
#define helium_radio_RadioReq_kind_tx_MSGTYPE helium_radio_RadioTxReq

#define helium_radio_RadioResp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (kind,tx,kind.tx),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (kind,rx_packet,kind.rx_packet),   3) \
X(a, CALLBACK, ONEOF,    BYTES,    (kind,parse_err,kind.parse_err),   4)
#define helium_radio_RadioResp_CALLBACK pb_default_field_callback
#define helium_radio_RadioResp_DEFAULT NULL
#define helium_radio_RadioResp_kind_tx_MSGTYPE helium_radio_RadioTxResp
#define helium_radio_RadioResp_kind_rx_packet_MSGTYPE helium_radio_RadioRxPacket

#define helium_radio_RadioTxReq_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   freq,              1) \
X(a, STATIC,   SINGULAR, UENUM,    radio,             2) \
X(a, STATIC,   SINGULAR, INT32,    power,             3) \
X(a, STATIC,   SINGULAR, UENUM,    bandwidth,         4) \
X(a, STATIC,   SINGULAR, UENUM,    spreading,         5) \
X(a, STATIC,   SINGULAR, UENUM,    coderate,          6) \
X(a, STATIC,   SINGULAR, BOOL,     invert_polarity,   7) \
X(a, STATIC,   SINGULAR, BOOL,     omit_crc,          8) \
X(a, STATIC,   SINGULAR, BOOL,     implicit_header,   9) \
X(a, CALLBACK, SINGULAR, BYTES,    payload,          10)
#define helium_radio_RadioTxReq_CALLBACK pb_default_field_callback
#define helium_radio_RadioTxReq_DEFAULT NULL

#define helium_radio_RadioRxPacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   freq,              1) \
X(a, STATIC,   SINGULAR, UINT32,   if_chain,          2) \
X(a, STATIC,   SINGULAR, BOOL,     crc_check,         3) \
X(a, STATIC,   SINGULAR, UINT64,   timestamp,         4) \
X(a, STATIC,   SINGULAR, UENUM,    radio,             5) \
X(a, STATIC,   SINGULAR, UENUM,    bandwidth,         6) \
X(a, STATIC,   SINGULAR, UENUM,    spreading,         7) \
X(a, STATIC,   SINGULAR, UENUM,    coderate,          8) \
X(a, STATIC,   SINGULAR, FLOAT,    rssi,              9) \
X(a, STATIC,   SINGULAR, FLOAT,    snr,              10) \
X(a, CALLBACK, SINGULAR, BYTES,    payload,          11)
#define helium_radio_RadioRxPacket_CALLBACK pb_default_field_callback
#define helium_radio_RadioRxPacket_DEFAULT NULL

#define helium_radio_RadioTxResp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     success,           1)
#define helium_radio_RadioTxResp_CALLBACK NULL
#define helium_radio_RadioTxResp_DEFAULT NULL

extern const pb_msgdesc_t helium_radio_RadioReq_msg;
extern const pb_msgdesc_t helium_radio_RadioResp_msg;
extern const pb_msgdesc_t helium_radio_RadioTxReq_msg;
extern const pb_msgdesc_t helium_radio_RadioRxPacket_msg;
extern const pb_msgdesc_t helium_radio_RadioTxResp_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define helium_radio_RadioReq_fields &helium_radio_RadioReq_msg
#define helium_radio_RadioResp_fields &helium_radio_RadioResp_msg
#define helium_radio_RadioTxReq_fields &helium_radio_RadioTxReq_msg
#define helium_radio_RadioRxPacket_fields &helium_radio_RadioRxPacket_msg
#define helium_radio_RadioTxResp_fields &helium_radio_RadioTxResp_msg

/* Maximum encoded size of messages (where known) */
/* helium_radio_RadioReq_size depends on runtime parameters */
/* helium_radio_RadioResp_size depends on runtime parameters */
/* helium_radio_RadioTxReq_size depends on runtime parameters */
/* helium_radio_RadioRxPacket_size depends on runtime parameters */
#define helium_radio_RadioTxResp_size            2

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
