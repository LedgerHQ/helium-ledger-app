/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_HELIUM_BLOCKCHAIN_TXN_HANDLER_PB_H_INCLUDED
#define PB_HELIUM_BLOCKCHAIN_TXN_HANDLER_PB_H_INCLUDED
#include <pb.h>
#include "blockchain_txn.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _helium_request_type { 
    helium_request_type_submit = 0, 
    helium_request_type_update = 1 
} helium_request_type;

/* Struct definitions */
typedef struct _helium_blockchain_txn_info_v1 { 
    pb_callback_t result; 
    pb_callback_t details; 
    pb_callback_t trace; 
    uint64_t height; 
    uint32_t queue_pos; 
    uint32_t queue_len; 
    uint32_t txn_protocol_version; 
} helium_blockchain_txn_info_v1;

typedef struct _helium_blockchain_txn_request_v1 { 
    helium_request_type type; 
    pb_callback_t key; 
    bool has_txn;
    helium_blockchain_txn txn; 
} helium_blockchain_txn_request_v1;


/* Helper constants for enums */
#define _helium_request_type_MIN helium_request_type_submit
#define _helium_request_type_MAX helium_request_type_update
#define _helium_request_type_ARRAYSIZE ((helium_request_type)(helium_request_type_update+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define helium_blockchain_txn_request_v1_init_default {_helium_request_type_MIN, {{NULL}, NULL}, false, helium_blockchain_txn_init_default}
#define helium_blockchain_txn_info_v1_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, 0}
#define helium_blockchain_txn_request_v1_init_zero {_helium_request_type_MIN, {{NULL}, NULL}, false, helium_blockchain_txn_init_zero}
#define helium_blockchain_txn_info_v1_init_zero  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define helium_blockchain_txn_info_v1_result_tag 1
#define helium_blockchain_txn_info_v1_details_tag 2
#define helium_blockchain_txn_info_v1_trace_tag  3
#define helium_blockchain_txn_info_v1_height_tag 4
#define helium_blockchain_txn_info_v1_queue_pos_tag 5
#define helium_blockchain_txn_info_v1_queue_len_tag 6
#define helium_blockchain_txn_info_v1_txn_protocol_version_tag 7
#define helium_blockchain_txn_request_v1_type_tag 1
#define helium_blockchain_txn_request_v1_key_tag 2
#define helium_blockchain_txn_request_v1_txn_tag 3

/* Struct field encoding specification for nanopb */
#define helium_blockchain_txn_request_v1_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, CALLBACK, SINGULAR, BYTES,    key,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  txn,               3)
#define helium_blockchain_txn_request_v1_CALLBACK pb_default_field_callback
#define helium_blockchain_txn_request_v1_DEFAULT NULL
#define helium_blockchain_txn_request_v1_txn_MSGTYPE helium_blockchain_txn

#define helium_blockchain_txn_info_v1_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    result,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    details,           2) \
X(a, CALLBACK, SINGULAR, BYTES,    trace,             3) \
X(a, STATIC,   SINGULAR, UINT64,   height,            4) \
X(a, STATIC,   SINGULAR, UINT32,   queue_pos,         5) \
X(a, STATIC,   SINGULAR, UINT32,   queue_len,         6) \
X(a, STATIC,   SINGULAR, UINT32,   txn_protocol_version,   7)
#define helium_blockchain_txn_info_v1_CALLBACK pb_default_field_callback
#define helium_blockchain_txn_info_v1_DEFAULT NULL

extern const pb_msgdesc_t helium_blockchain_txn_request_v1_msg;
extern const pb_msgdesc_t helium_blockchain_txn_info_v1_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define helium_blockchain_txn_request_v1_fields &helium_blockchain_txn_request_v1_msg
#define helium_blockchain_txn_info_v1_fields &helium_blockchain_txn_info_v1_msg

/* Maximum encoded size of messages (where known) */
/* helium_blockchain_txn_request_v1_size depends on runtime parameters */
/* helium_blockchain_txn_info_v1_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
